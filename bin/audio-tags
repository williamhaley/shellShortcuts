#!/usr/bin/env python3

import os
import re
import pathlib
import argparse
from mutagen.mp4 import MP4
from mutagen.id3 import ID3, TIT2, TALB, TPE1, TPE2, COMM, USLT, TCOM, TCON, TDRC, TRCK, TPOS
from mutagen.mp3 import MP3

'''
Allowed formats:

Artist - Album (Year)/## Title.extension
Artist (Year)/## Title.extension
Artist/## Title.extension
Artist/##-## Title.extension
Artist/Title.extension

Use "Various Artists" as the Artist where applicable.
'''

parser = argparse.ArgumentParser(description='Sync audio tags from file structure.')
parser.add_argument(
	'--directory',
	dest='directory',
	type=str,
	help='the directory to process',
	required=False
)
parser.add_argument(
	'--album',
	dest='album',
	type=str,
	help='the album to process',
	required=False
)
args = parser.parse_args()

DEFAULT_ALBUM='Unknown Album'
DEFAULT_YEAR=''
DEFAULT_TRACK=0
DEFAULT_DISK=1

def process_album(album_dir):
	if not os.path.isdir(album_dir):
		print("Not a dir" + album_dir)
		return

	m = re.search('^(?P<artist>.*?)(?: - (?P<album>.*?))?\ *?(?:\((?P<year>\d{4})\))?$', album_dir)
	if not m:
		print(album + ' did not match regex')
		return

	d = m.groupdict()

	artist = d.get('artist')
	album  = d.get('album') if d.get('album') else DEFAULT_ALBUM
	year   = d.get('year')  if d.get('year')  else DEFAULT_YEAR

	songs = os.listdir(album_dir)

	for song in songs:
		m2 = re.search('^(?:(?P<disk>\d+)-)?(?:(?P<track>\d+) )?(?P<title>.*)\.(?P<extension>.*)?$', song)
		if not m2:
			print(song + ' did not match regex')
			continue

		d2 = m2.groupdict()

		extension = d2.get('extension')
		disk      = d2.get('disk')  if d2.get('disk')  else DEFAULT_DISK
		track     = d2.get('track') if d2.get('track') else DEFAULT_TRACK
		title     = d2.get('title')

		if extension not in ['m4a', 'mp3']:
			continue

		path = os.path.abspath(os.path.join(album_dir, song))

		# print(artist, album, year, track, title)

		if extension == 'm4a':
			meta = MP4(path)			
			meta.clear()
			meta['\xa9alb'] = album
			meta['\xa9nam'] = title
			meta['\xa9ART'] = artist
			meta['\xa9gen'] = ''
			meta['\xa9day'] = year
			meta['trkn'] = [(int(track), 0)]
			meta['disk'] = [(int(disk),  0)]

		if extension == 'mp3':
			track = '' if track == 0 else track

			meta = MP3(path)
			meta.clear()
			meta["TALB"] = TALB(encoding=3, text=album)
			meta["TIT2"] = TIT2(encoding=3, text=title)
			meta["TPE1"] = TPE1(encoding=3, text=artist)
			meta["TCON"] = TCON(encoding=3, text=u'')
			meta["TDRC"] = TDRC(encoding=3, text=year)
			meta["TRCK"] = TRCK(encoding=3, text=track)
			meta["TPOS"] = TPOS(encoding=3, text=disk)

		meta.save()

if args.album:
	p = pathlib.Path(args.album)
	process_album(str(p.resolve()))
elif args.directory:
	albums = os.listdir(args.directory)
	for album in albums:
		p = Path(album)
		process_album(str(p.resolve()))
else:
	print('Must pass either an album of directory')

