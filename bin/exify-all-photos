#!/usr/bin/env python3

import os
import re
from datetime import datetime, timedelta
import subprocess

"""
Run this command when in a directory full of photos. The goal is to apply EXIF
DateTimeOriginal values where images are missing that data. There are a few
reasons why photos may miss that EXIF. Maybe they're scanned images, or the EXIF
was stripped.

Photos that already have a DateTimeOriginal EXIF value will not be modified.

Photos will have a make and model set to "exify-all-photos" to give some context
that they were tagged by this script.

This script is not perfect. It assumes that the directory has a series of
sub-directories for photos like so. See "regexes" var for allowed formats.

./1964-1965 Old scanned photos
./1978 Halloween
./1978 New Years
./1999-10-01 October
./2004 Halloween pics
./2020-01-20 Some Photos

The date information before the first space (" ") character is used to derive
the date applied to all images in that directory. Dates default to 01 for the
month and day if not provided. A sequential system is used when applying EXIF to
try and maintain any sort order. Note the seconds increase for each photo.

./1964-1965 Old scanned photos
  ./img1.jpg # => 1964-01-01 00:00:01
  ./img2.jpg # => 1964-01-01 00:00:02
  ./img3.jpg # => 1964-01-01 00:00:03

Only the top-level directory impacts the dates we apply. Sub-directory names are
ignored and not taken into consideration.

./1978 Halloween
  ./img1.jpg                  # => 1978-01-01 00:00:01
  ./img2.jpg                  # => 1978-01-01 00:00:02
  ./img3.jpg                  # => 1978-01-01 00:00:03
  ./1988 some sub-directory/
    ./ANOTHER PHOTO.JPEG      # => 1978-01-01 00:00:04

Work is done to "pick up" where a date left off. So here if we had two directories
with "2004" as the date we'll pick up from the last round of tagging so that
the photos are still in some sort of order.

./2004 Autumn
  ./img1.jpg    # => 2004-01-01 00:00:01
  ./img2.jpg    # => 2004-01-01 00:00:02
  ./dogs.JPG    # => 2004-01-01 00:00:03
./2004 Spring
  ./family.jpg  # => 2004-01-01 00:00:04
  ./friends.jpg # => 2004-01-01 00:00:05
  ./dancing.jpg # => 2004-01-01 00:00:06

Any errors will kill the entire script.

Directories that don't match the naming conventions will be logged and skipped.
"""

# In order of preference/specificity.
regexes = [
	'^(?P<year>[0-9]{4})-(?P<month>[0-9]{2})-(?P<day>[0-9]{2})$',    # Exactly YYYY-MM-DD
	'^(?P<year>[0-9]{4})-(?P<month>[0-9]{2})$',                      # Exactly YYYY-MM
	'^(?P<year>[0-9]{4})-[0-9]{4}-(?P<month>[0-9]{2})$',             # Exactly YYYY-YYYY-MM
	'^(?P<year>[0-9]{4})-[0-9]{4}$$',                                # Exactly YYYY-YYYY
	'^(?P<year>[0-9]{4})$',                                          # Exactly YYYY
	'^(?P<year>[0-9]{4})-(?P<month>[0-9]{2})-(?P<day>[0-9]{2}).*?$', # Anything starting with YYYY-MM-DD
	'^(?P<year>[0-9]{4})-(?P<month>[0-9]{2}).*?$',                   # Anything starting with YYYY-MM
	'^(?P<year>[0-9]{4}).*?$',                                       # Anything starting with YYYY
]

def parse_date(date_string):
	for regex in regexes:
		match = re.search(regex, date_string)
		if not match:
			continue
		tokens = match.groupdict()
		# Log here if a regex is failing
		# print(date_string, tokens, regex)
		year = tokens.get('year')
		month = tokens.get('month') or '01'
		day = tokens.get('day') or '01'
		return datetime.strptime('{}-{}-{}'.format(year, month, day), '%Y-%m-%d')

def photo_already_has_date_time_exif(path):
	command = ['exiftool', '-s', '-s', '{}'.format(absolute_path)]
	process = subprocess.Popen(command, stdout=subprocess.PIPE)
	output, error = process.communicate()
	if error:
		raise Exception(error)
	# Encoding used for CMD - https://stackoverflow.com/a/50234204/1459103
	exif = output.decode('ISO-8859-15').split("\n")
	return next((x for x in exif if 'DateTimeOriginal' in x), None) is not None

def set_exif_date_time(path, date):
	timestamp = date.strftime('%Y-%m-%d %H:%M:%S')
	print('{} - setting date to {}'.format(path, timestamp))
	command = [
		'exiftool',
		'-overwrite_original',
		'-make={}'.format('exify-all-photos'),
		'-model={}'.format('exify-all-photos'),
		'-datetimeoriginal={}'.format(timestamp),
		path
	]
	process = subprocess.Popen(command, stdout=subprocess.PIPE)
	output, error = process.communicate()
	if error:
		raise Exception(error)

visited_dates = {}

for d in filter(os.path.isdir, os.listdir()):
	date = parse_date(d.split(' ', 1)[0])
	if not date:
		print('{} is invalid'.format(d))
		continue

	key = date.strftime('%Y-%m-%d')
	existing_date = visited_dates.get(key)
	# We already tagged some photos using YYYY-MM-DD. Pick up where those dates
	# left off to help maintain some sort of ordering.
	if existing_date:
		print('picking up at: {}'.format(existing_date))
		date = existing_date

	# Walk will find all files in the subdirectories, but note that we don't
	# care about the names/dates on any subdirectories. Only the top-level dir
	# is used for deriving dates. This is to discourage directory nesting and
	# encourage descriptive top-level directories for a flatter layout.
	for root, dirs, files in os.walk(d):
		path = root.split(os.sep)
		for file in sorted(files):
			if file.endswith(('.jpg', '.JPG', '.jpeg', '.JPEG')):
				absolute_path = os.path.join(root, file)
				if photo_already_has_date_time_exif(absolute_path):
					continue
				# Add one second to each photo we tag so that they maintain sort
				# order in apps that sort by the DateTimeOriginal.
				date = date + timedelta(seconds=1)
				set_exif_date_time(absolute_path, date)

	# Keep track of where we left off for this YYYY-MM-DD.
	visited_dates[key] = date
